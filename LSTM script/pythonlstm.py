# -*- coding: utf-8 -*-
"""pythonLSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EjeZ08_mGBgl2MJPUllK6C_On9mdaTrt
"""

Silver = "SI=F"
Platinum = "PL=F"
Gold = "GC=F"

Metal = "Gold"
getmetal = Gold

import yfinance as yf
import pandas as pd
msft = yf.Ticker(getmetal)
hist = msft.history(period="max")
df = hist
df1 = df.reset_index()
df1 = df1[['Close']]
#df1['Date'] = pd.to_datetime(df1['Date'])
df1 = df1.rename(columns={"Close": "Price"})
emptycell = df1["Price"].isnull().sum()
if emptycell > 0:
  df.dropna(subset=["Price"], inplace = True)
df1

df2 = df[['Close']]
df2

"""Visualize the data"""

import matplotlib.pyplot as plt
plt.title(Metal + " Max History Data")
plt.plot(df2)

"""Preprocess for stacked lstm

"""

import numpy as np
from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler(feature_range=(0,1))
df1=scaler.fit_transform(np.array(df1).reshape(-1,1))
df11 = scaler.inverse_transform(df1)
df11

##split data into train and test
training_size = int(len(df1)*0.8)
test_size = len(df1)-training_size
train_data,test_data = df1[0:training_size,:],df1[training_size:len(df1):1]

import numpy
#convert an array of values into a dataset matrix
def create_dataset(dataset, time_step=1):
  dataX, dataY = [], []
  for i in range(len(dataset)-time_step-1):
    a = dataset[i:(i+time_step), 0]
    dataX.append(a)
    dataY.append(dataset[i+time_step,0])
  return numpy.array(dataX), numpy.array(dataY)

#reshape into X=t, t+1, t+2, t+3 and Y=t+4
time_step = 60
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

"""Stacked lstm model"""

#reshape input to be [samples, time steps, features] which is required for lstm
# Shaping/adding new dimensions to allow adding more indicators: from 2D to 3D
# 3 input arguments
# batch_size: number of observations
# timesteps: number of columns
# input_dim: number of predictors
X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],1)
X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],1)

##create the stacked LSTM model
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout
from tensorflow.keras.layers import LSTM

model=Sequential()
#Adding the first LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))

# Adding a second LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))

# Adding a third LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50, return_sequences = True))

# Adding a forth LSTM layer and some Dropout regularisation
model.add(LSTM(units = 50))

# Adding the output layer
model.add(Dense(units = 1))

#model.add(Activation('tanh'))
model.compile(loss='mean_squared_error', optimizer='adam')

model.summary()

from keras.utils import plot_model
plot_model(model)

model.fit(X_train,y_train,validation_data=(X_test,y_test), epochs=120, batch_size=32, verbose=1)

model.save('models/'+ Metal +'priceMax_model.h5')
